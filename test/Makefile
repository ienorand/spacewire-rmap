# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = /usr/src/googletest/googletest

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = /usr/src/googletest/googlemock

# Where to find user code.
USER_DIR = $(CURDIR)/..

COVERAGE_DIR ?= $(CURDIR)/coverage-build

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include
CPPFLAGS += -I$(USER_DIR) -I$(USER_DIR)/test
COVERAGE_CPPFLAGS += -DNDEBUG

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread
COVERAGE_CXXFLAGS += -O0 --coverage

# Flags passed to the C compiler.
CFLAGS += -O2 -g -Wall -Wextra -std=c99 -Wpedantic -pthread
COVERAGE_CFLAGS += -O0 --coverage

COVERAGE_LDFLAGS += --coverage

LDLIBS += -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = rmap_test rmap_test_with_custom_crc_implementation

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gmock.a gmock_main.a *.o
	rm -rf coverage-build

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

test_patterns.o: test_patterns.cc test_patterns.h $(USER_DIR)/rmap.h
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

rmap_test: rmap_test.o test_patterns.o rmap_shim.o rmap.o gmock_main.a
	$(LINK.cc) $(OUTPUT_OPTION) $^

rmap_test_with_custom_crc_implementation: rmap_test.o test_patterns.o rmap_shim.o rmap_without_crc_calculate.o rmap_custom_crc_implementation.o gmock_main.a
	$(LINK.cc) $(OUTPUT_OPTION) $^

rmap_test.o: rmap_test.cc rmap_shim.h $(USER_DIR)/test/test_patterns.h $(USER_DIR)/rmap.h
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

rmap.o: $(USER_DIR)/rmap.c $(USER_DIR)/rmap.h
	$(COMPILE.c) $(OUTPUT_OPTION) $<

rmap_without_crc_calculate.o: $(USER_DIR)/rmap.c $(USER_DIR)/rmap.h
	$(COMPILE.c) -DRMAP_CUSTOM_CRC_IMPLEMENTATION $(OUTPUT_OPTION) $<

rmap_custom_crc_implementation.o: rmap_custom_crc_implementation.c $(USER_DIR)/rmap.h
	$(COMPILE.c) $(OUTPUT_OPTION) $<

rmap_shim.o: rmap_shim.c rmap_shim.h $(USER_DIR)/rmap.h
	$(COMPILE.c) $(OUTPUT_OPTION) $<

test: all
	./rmap_test

test-with-custom-crc: all
	./rmap_test_with_custom_crc_implementation

coverage-build/rmap_test: rmap_test.o test_patterns.o rmap_shim.o coverage-build/rmap.o gmock_main.a | coverage-build
	$(LINK.cc) $(COVERAGE_LDFLAGS) $(OUTPUT_OPTION) $^

coverage-build/rmap_test_with_custom_crc_implementation: rmap_test.o test_patterns.o rmap_shim.o coverage-build/rmap_without_crc_calculate.o rmap_custom_crc_implementation.o gmock_main.a | coverage-build
	$(LINK.cc) $(COVERAGE_LDFLAGS) $(OUTPUT_OPTION) $^

coverage-build/rmap.o: $(USER_DIR)/rmap.c $(USER_DIR)/rmap.h | coverage-build
	$(COMPILE.c) $(COVERAGE_CFLAGS) $(COVERAGE_CPPFLAGS) $(OUTPUT_OPTION) $<

coverage-build/rmap_without_crc_calculate.o: $(USER_DIR)/rmap.c $(USER_DIR)/rmap.h | coverage-build
	$(COMPILE.c) $(COVERAGE_CFLAGS) $(COVERAGE_CPPFLAGS) -DRMAP_CUSTOM_CRC_IMPLEMENTATION $(OUTPUT_OPTION) $<

coverage-build:
	mkdir -p $@

.PHONY: coverage-run
coverage-run: coverage-build/rmap_test coverage-build/rmap_test_with_custom_crc_implementation
	coverage-build/rmap_test --gtest_brief=1
	coverage-build/rmap_test_with_custom_crc_implementation --gtest_brief=1

coverage-build/%.gcov: coverage-run
	(cd coverage-build && gcov --all-blocks --branch-probabilities $(@:coverage-build/%.gcov=%))

coverage-build/coverage-gcovr-report.html: coverage-run
	(cd coverage-build && gcovr --decisions --html-details $(@:coverage-build/%=%) --print-summary --root $(USER_DIR))

.PHONY: coverage-gcov-report
coverage-gcov-report: coverage-build/rmap.c.gcov

.PHONY: coverage-gcovr-report
coverage-gcovr-report: coverage-build/coverage-gcovr-report.html

.PHONY: coverage
coverage: coverage-gcov-report
